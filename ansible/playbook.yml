---
- name: Configure
  hosts: docker
  remote_user: root
  handlers:
    - name: restart ufw
      service: name=ufw state=restarted
  tasks: 
    - name: Install ufw
      apt: package=ufw state=present

    - name: Enable ufw logging
      ufw: logging=on

    - name: Configure ufw defaults
      ufw: direction={{ item.direction }} policy={{ item.policy }}
      with_items:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }
      notify:
        - restart ufw

    - name: Configure ufw rules
      ufw: rule={{ item.rule }} port={{ item.port }} proto={{ item.proto }}
      with_items:
        - { rule: 'limit', port: '{{ ssh_port | default("22") }}', proto: 'tcp' }
        - { rule: 'allow', port: '80', proto: 'tcp' }
        - { rule: 'allow', port: '443', proto: 'tcp' }
        - { rule: 'allow', port: '2376', proto: 'tcp' }
        - { rule: 'allow', port: '2377', proto: 'tcp' }
        - { rule: 'allow', port: '7946', proto: 'tcp' }
        - { rule: 'allow', port: '7946', proto: 'udp' }
        - { rule: 'allow', port: '4789', proto: 'udp' }

      notify:
        - restart ufw

    - name: Update Repos
      shell: apt update

    - name: Install pip
      apt: package=python3-pip state=present

    - name: Install Docker Module for Python
      pip:
        name: docker

- name: manager
  hosts: docker
  remote_user: root
  tasks: 
    - name: Check if Swarm has already been Initialized
      shell: docker node ls
      register: swarm_status
      ignore_errors: true
      when: "hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == hostvars['swarm-manager1']['ansible_default_ipv4']['address']"

    - name: Initialize Docker Swarm
      docker_swarm:
        state: present
        advertise_addr: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}" 
      when: swarm_status.rc != 0
      run_once: true
      when: "hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == hostvars['swarm-manager1']['ansible_default_ipv4']['address']"

    - name: Get the worker join-token
      shell: docker swarm join-token --quiet worker
      register: worker_token
      when: "hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == hostvars['swarm-manager1']['ansible_default_ipv4']['address']"

    - name: Add worker nodes
      docker_swarm:
        state: join
        advertise_addr: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        join_token: "{{ hostvars['swarm-manager1']['worker_token']['stdout'] }}"
        remote_addrs: "{{ hostvars['swarm-manager1']['ansible_default_ipv4']['address'] }}:2377"
      when: inventory_hostname in groups["swarm_workers"]

    - name: Print worker_token
      debug:
        msg: "{{ worker_token }} wtf: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

- name: Docker compose
  hosts: swarm_managers
  remote_user: root
  tasks:
    - name: copy docker-compose.yml
      copy:
        src: docker-compose.yml
        dest: docker-compose.yml
    - name: Create docker folder
      file:
        path: .docker
        state: directory
    - name: Create docker config
      copy:
        src: config.json
        dest: .docker/config.json

    - shell: 'ls -la'
      register: cmd

    - debug:
        msg: "{{ cmd.stdout }}"

    - shell: 'cat .docker/config.json'
      register: cmd

    - debug:
        msg: "{{ cmd.stdout }}"

    - name: Docker login
      shell: docker --config .docker login registry.digitalocean.com/akashi
    - name: Up services
      shell: docker compose up -d